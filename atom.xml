<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Binary Strolls]]></title>
  <link href="http://dbalan.github.io/atom.xml" rel="self"/>
  <link href="http://dbalan.github.io/"/>
  <updated>2016-04-01T11:56:26+05:30</updated>
  <id>http://dbalan.github.io/</id>
  <author>
    <name><![CDATA[Dhananjay Balan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Finding a programming job]]></title>
    <link href="http://dbalan.github.io/blog/2016/03/31/finding-a-programming-job/"/>
    <updated>2016-03-31T17:01:00+05:30</updated>
    <id>http://dbalan.github.io/blog/2016/03/31/finding-a-programming-job</id>
    <content type="html"><![CDATA[<p><strong> TL;DR</strong> My learning from job hunting as a programmer._</p>

<p>Sometime ago I decided that I need a change of scenery and decided to look for new gigs.</p>

<p>My current job is my first real job after university. Looking back, now that I&rsquo;ve more experience of the hiring process, I feel landing it was ridiculously easy ! So you can see job hunting is a quite new territory for me. This is in no way a definitive guide for finding a job; merely my experience.</p>

<p>I&rsquo;ve couple of friends who insist it&rsquo;s a sellers market &ndash; but there are lot more variables that are at play.</p>

<p>The first obvious approach was to apply to all the companies I care about. Fill up the forms in <code>https://company.com/careers</code>.  Turns out this is far from truth. Almost no one replied, so I started scouring job boards.</p>

<p>Here is the data from my experiments</p>

<p><img src="http://dbalan.github.io/images/job_hunt_plot.png"></p>

<p>I did my due diligence before applying to these companies, reading the job description thoroughly, googling a bit about the engineering, etc. Even then, the conversion rate to an interview is really really small. Most of the organisations don&rsquo;t reply at all.</p>

<p>This are the things I picked up from my efforts &ndash;</p>

<h2>Write a good cover letter.</h2>

<p>This is really important if you are applying via email. In the beginning, my cover letters were mostly focused on my interest in the position and organisation with resume which talked about the profile and work experience. The moment I started moving more info into the cover letter, response rate increased. Its OK if you end up duplicating information, try to cram more info onto the letter without increasing the word count much.</p>

<p>Also, be very open about your status, if you&rsquo;d need sponsorship for VISA, mention it in the beginning itself, saves time for both you and the organisation.</p>

<h2>Automate all possible things</h2>

<p>Nobody has time to write a billion emails and manage regular work, so automate them. In my case I separated my cover letter into parts that are common and specific to a position.</p>

<p>Then I wrote a small script that reads the email and the specific bits from an spreadsheet and sends out application emails.</p>

<h2>Use the network</h2>

<p>This is so far the best option to search for a job. Friends can give you a direct connection to a prospective employer. Also, conversion rate is really huge because the recommender often has a good idea about job and the candidate.</p>

<h2>Find a real person</h2>

<p>The job descriptions usually is too generic and most times there&rsquo;ll be hidden requirements. Find a direct contact in the company and ask about their current stack, engineering workflow and exact needs. This person can also turn out to be your biggest ally in the process.</p>

<h2>Get a good calendar application</h2>

<p>Interviews mean lots of meetings spanned across multiple time zones, so add everything to a calendar and stick to it. Pay extra attention to time zone conversions.</p>

<h2>Get over with rejection</h2>

<p>There are plenty of reasons to get rejected, and it may not be anything you control. Maybe the company is going through a restructuring, maybe the position is no longer available or the all time favourite VISA restrictions.</p>

<p>Important thing is to get feedback so that you can fix all possible issues. <a href="https://www.quora.com/Why-do-interviewers-refuse-to-give-valuable-feedback-to-rejected-candidates-after-interviews">Interviewers are generally hesitant to give feedback</a>. But there is no harm in asking.</p>

<p><em>thanks <a href="https://twitter.com/technikhil">@technikhil</a>, <a href="https://twitter.com/imdonatello">@imdonatello</a>, <a href="https://twitter.com/tsudot">@tsudot</a> and <a href="https://twitter.com/_gsin_">@_gsin_</a> for reading the draft.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[go: `:=` operator causes accidental shadowing]]></title>
    <link href="http://dbalan.github.io/blog/2016/01/14/golang-shorthand-operator-allows-accidental-shadowing-of-variable/"/>
    <updated>2016-01-14T21:13:00+05:30</updated>
    <id>http://dbalan.github.io/blog/2016/01/14/golang-shorthand-operator-allows-accidental-shadowing-of-variable</id>
    <content type="html"><![CDATA[<p>Go provides <code>:=</code> operator to make declaring variables easier. It is a <a href="https://golang.org/ref/spec#Short_variable_declarations">shorthand to declare and set a value of a variable</a>. for example,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">var</span> <span class="nx">x</span> <span class="kt">int</span>
</span><span class='line'><span class="nx">x</span> <span class="p">=</span> <span class="mi">42</span>
</span></code></pre></td></tr></table></div></figure>


<p>can be written as</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">x</span> <span class="o">:=</span> <span class="mi">42</span>
</span></code></pre></td></tr></table></div></figure>


<p>But if not careful, this can accidently shadow variable bindings. Let&rsquo;s look at the fictitious piece of code.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">fictitiousFunc</span><span class="p">()</span> <span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">42</span><span class="p">,</span> <span class="kc">nil</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">x</span> <span class="o">:=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">x</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">fictitiousFunc</span><span class="p">()</span>
</span><span class='line'>    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;I&#39;ll never print&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;value of x: &quot;</span><span class="p">,</span> <span class="nx">x</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This produces following output</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">value</span> <span class="nx">of</span> <span class="nx">x</span><span class="p">:</span>  <span class="mi">42</span>
</span></code></pre></td></tr></table></div></figure>


<p>While, this following piece of code will fail to compile</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">fictitiousFunc</span><span class="p">()</span> <span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">42</span><span class="p">,</span> <span class="kc">nil</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">x</span> <span class="o">:=</span> <span class="mi">10</span>
</span><span class='line'>    <span class="c1">// replace :=</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">x</span> <span class="kt">int</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">err</span> <span class="kt">error</span>
</span><span class='line'>    <span class="nx">x</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">fictitiousFunc</span><span class="p">()</span>
</span><span class='line'>    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;I&#39;ll never print&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;value of x: &quot;</span><span class="p">,</span> <span class="nx">x</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>output:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">prog</span><span class="p">.</span><span class="k">go</span><span class="p">:</span><span class="mi">12</span><span class="p">:</span> <span class="nx">x</span> <span class="nx">redeclared</span> <span class="nx">in</span> <span class="nx">this</span> <span class="nx">block</span>
</span><span class='line'>    <span class="nx">previous</span> <span class="nx">declaration</span> <span class="nx">at</span> <span class="nx">prog</span><span class="p">.</span><span class="k">go</span><span class="p">:</span><span class="mi">10</span>
</span></code></pre></td></tr></table></div></figure>


<p>So we can see that the operator is somewhat intelligent, and does not redeclare the variables.</p>

<p>Now what if we push it down a scope? See the following code</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">fictitiousFunc</span><span class="p">()</span> <span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">42</span><span class="p">,</span> <span class="kc">nil</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">someCondition</span> <span class="o">:=</span> <span class="kc">true</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nx">x</span> <span class="o">:=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">if</span> <span class="nx">someCondition</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">x</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">fictitiousFunc</span><span class="p">()</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;I&#39;ll never print&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;value of x inside: &quot;</span><span class="p">,</span> <span class="nx">x</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;value x outside: &quot;</span><span class="p">,</span> <span class="nx">x</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This produces,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">value</span> <span class="nx">of</span> <span class="nx">x</span> <span class="nx">inside</span><span class="p">:</span>  <span class="mi">42</span>
</span><span class='line'><span class="nx">value</span> <span class="nx">x</span> <span class="nx">outside</span><span class="p">:</span>  <span class="o">-</span><span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>At line: 16, since the immediate scope (line:15-32) does not have variable <code>x</code> declared, <code>:=</code> is redeclaring the variable. a.k.a the <strong>variable <code>x</code> gets shadowed</strong>.</p>

<p>Only workaround I can think of is not to use <code>:=</code>, i.e change the code to</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">if</span> <span class="nx">someCondition</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">err</span> <span class="kt">error</span>
</span><span class='line'>    <span class="nx">x</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">fictitiousFunc</span><span class="p">()</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;I&#39;ll never print&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;value of x inside: &quot;</span><span class="p">,</span> <span class="nx">x</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you know something better let me know.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swanthathralokam '15]]></title>
    <link href="http://dbalan.github.io/blog/2015/12/28/swanthathralokam/"/>
    <updated>2015-12-28T12:52:00+05:30</updated>
    <id>http://dbalan.github.io/blog/2015/12/28/swanthathralokam</id>
    <content type="html"><![CDATA[<p><em><a href="http://swathanthralokam2015.com/">Swathathralokam &lsquo;15</a> was a conference on rationality and free thought that happened during 24th and 25th of december 2015</em></p>

<p>This was my first experience of attending a non tech conference. Also, first one with malayalam as the primary language. I have been to conferences which dealt with intersection of technology with other things, like hillhacks and hackbeach.  But SL caters to an entirely different crowd.</p>

<p>I was the only one actively using a laptop, first stint of culture difference. At Least I could tether my mobile internet without interfering wifi APs. Except two of the linux boxes organisers were running, everything else was windows. I guess desktop linux has to catch up a lot more than I previously thought.</p>

<p>SL is put together by an organisation called “Kerala Freethinkers Forum”, the way this community has come together using social media, esp facebook is amazing. It did push my dilema further about maintaining a facebook account. Definitely delayed the decision to eventually delete the account. Some more thinking is needed.</p>

<p>The conference had around 20 talks spanned over two days, I found the talks to be dense, more than my feeble brain could process. I had to take an extra break between talks (sadly, missing a part of next one) to reflect on the newly obtained information.</p>

<p>Language was a barrier. Malayalm has become a bit more cumbersome to process. I seem to have lost the fluidity in using it, like a machine that has kept unused for long. At this moment giving a formal talk is way too hard for me (this was also, my first malayalam talk)</p>

<p>I found that out during my ten minute pitch of <a href="http://captnemo.in/homeopathy/">Nemo’s Bug bounty for homeopathy</a>. I had to switch languages &ndash; which I&rsquo;m afraid got interpreted as an elitist talk. Anyway, it did produce results. I got to meet <a href="https://www.researchgate.net/profile/Manoj_Komath">Dr. Manoj Komet</a> who has written <a href="http://yukthiyugam.com/tag/manoj-komath/">many articles against homeopathy</a> and state of health sciences in general. I am going to go through all the content he pointed out and do something about it.</p>

<p>I got <a href="https://github.com/captn3m0/captn3m0.github.com/pull/8">one more donor for bug bounty</a> as well. :&ndash;)</p>

<p>These were my favourite talks from SL &ndash;</p>

<p>Megha&rsquo;s talk on <strong>&ldquo;Phantoms in human nature&rdquo;</strong> was a spot on because I just finished <em>&ldquo;Thinking fast and slow&rdquo;</em> and was scouring <em>LessWrong</em> for more content. She did a good job of explaining. I enjoyed talking to her post session very much.</p>

<p>Nishad&rsquo;s Talk on <strong>&ldquo;Wason selection task and rational thinking&rdquo;</strong>, He introduced wason selection task and went ahead to explain <em>Necessary and sufficient conditions</em>. The simplicity in which he introduced the math behind was amazing.</p>

<p><strong>&ldquo;Luca, Luci and me&rdquo;</strong> was a talk by Dr. KP Aravindan on evolution. It was refreshing to go through those contents again. It made me dig up my old notes from my brilliant genetics teacher [a grad student in genetic engineering at that time] and refresh them when I was home.</p>

<p><em>I was told that recordings will be uploaded to youtube soon. Will try to link them as soon as they are up.</em></p>

<p>There was an open forum  on <em>&ldquo;Family and rationality&rdquo;</em>. I felt it contained way too much anecdotal statements (of kind “I have this experience so I support this worldview of family”). It was also loosely structured, making it a bit difficult to follow. I guess that&rsquo;s the difference between a debate and an open forum(?). I don&rsquo;t think it helped me much. I would have been much happier with a proper debate with bit more moderation. The gender parity was at the forum was another concern. There were fewer women speakers.</p>

<p>Last but not least, I did encounter some cool tech in the conference venue. The org tech team, <a href="https://www.facebook.com/2ar.rahul">Rahul</a>, <a href="https://www.facebook.com/abhai.sasidharan">Abhay</a>, and <a href="https://www.facebook.com/profile.php?id=100009322327244&amp;fref=ts">Akhil</a> setup a <a href="https://gist.github.com/ar-rahul/50b5044aca38918223e7">live feed using gstreamer</a>. They used UDP multicast to stream the feed to monitors in surrounding buildings. It worked very well, except for a bit noisy audio signal due to poor earthing.</p>

<p>Overall, it was a nice conference,met a lot of old friends, made few new ones. perfect way to start the winter break.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Random rant]]></title>
    <link href="http://dbalan.github.io/blog/2015/12/01/a-random-rant/"/>
    <updated>2015-12-01T00:00:00+05:30</updated>
    <id>http://dbalan.github.io/blog/2015/12/01/a-random-rant</id>
    <content type="html"><![CDATA[<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/me sets +rant</span></code></pre></td></tr></table></div></figure>


<p>Yesterday, Found an old portable hard disk in the attic. Face lights up. Connect to computer, doesnt work. The connection probabaly fried. Its probabaly the connector, HDD internally uses a <code>SATA</code> bus.</p>

<p>I know what to do, lets oopen the server box and connect to the motherboard. Can’t find any SATA cable. <code>find sata ~house</code></p>

<p>Finally hard disk plugged in, <code>FreeBSD</code> boots. <code>dmesg</code> shows everything is alright, except <code>ext4</code>. #sigh</p>

<p>Somebody suggests <code>fuse</code>. Alright, thats it then. Compile, <code>kldld</code> and booyeah!</p>

<p>Okay, its full of photos from past. Wow! I need to see them, lets share it to something with a monitor. That’d be my mac. <code>sshfs</code>? Sorry dude, you need the whole <code>XCode</code> suite and should sacrifice an extra kidney to load unsigned <code>kext</code>s.</p>

<p>But there are other ways of sharing files. <code>SMB</code> FTW!</p>

<p>Why the fuck are there three samba versions in ports. <code>cd /usr/ports/samba$(random_ver)</code></p>

<p>Okay, samba is setup and mounted, tears</p>

<p>Nooo &ndash; I can’t access the hard disk. Why? huh perms fucking perms!</p>

<p>I got this! gonna chmod the shit out, but except… it doesn’t work. What the fuck does not implemented mean?</p>

<p>JFGI. JFGI POints to ext4 code &ndash; ext4 fuse is strictly read only. (facepalm)</p>

<p>Story still continues…</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Recursion]]></title>
    <link href="http://dbalan.github.io/blog/2015/08/22/recursion/"/>
    <updated>2015-08-22T00:28:00+05:30</updated>
    <id>http://dbalan.github.io/blog/2015/08/22/recursion</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">fibonacci</span> <span class="ow">::</span> <span class="p">[</span><span class="kt">Integer</span><span class="p">]</span>
</span><span class='line'><span class="nf">fibonacci</span> <span class="ow">=</span> <span class="mi">1</span><span class="kt">:</span><span class="mi">1</span><span class="kt">:</span><span class="p">(</span><span class="n">zipWith</span> <span class="p">(</span><span class="o">+</span><span class="p">)</span> <span class="n">fibonacci</span> <span class="p">(</span><span class="n">tail</span> <span class="n">fibonacci</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Above is a simple function that generates an infinite stream of fibonacci numbers. Its written in haskell.</p>

<p>This is a piece of code that made me think a lot lately, it make clever use of recursion to define the stream and computes with a linear number of additions. I think its pretty damn sexy!</p>

<h2>Notes:</h2>

<ul>
<li>Many thanks to a co-worker who helped me figure this out.</li>
<li>I hear that there are more efficient ways to compute fibonacci numbers (namley O(logn)). &ndash; should investigate this</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Static site generators]]></title>
    <link href="http://dbalan.github.io/blog/2015/06/30/static-site-generators/"/>
    <updated>2015-06-30T00:28:00+05:30</updated>
    <id>http://dbalan.github.io/blog/2015/06/30/static-site-generators</id>
    <content type="html"><![CDATA[<p>I use octopress with github hosting my pages.
Everytime I sit down to write, I have to look up commands in my bash history and read documentation. Its very distracting when you just want to write.</p>

<p>Maybe its my workflow thats wrong, I should replace all this with a set of small shell scripts :-P, maybe octopress 3.0 (insert another tool) will solve this.</p>

<p>But at this point I dont even remember which branch in my repo has what, and I should switch to a firendlier paltform (ghost or posthaven) or do a massive cleanup ASAP.</p>

<p><em>EDIT: I finally managed to do that clean up</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Notes on cgo]]></title>
    <link href="http://dbalan.github.io/blog/2015/03/29/notes-on-cgo/"/>
    <updated>2015-03-29T00:28:00+05:30</updated>
    <id>http://dbalan.github.io/blog/2015/03/29/notes-on-cgo</id>
    <content type="html"><![CDATA[<h2>Referencing c from go.</h2>

<h3>Basic operation</h3>

<p>import &ldquo;C&rdquo; imports the C namespace into go, the comment just above this statement is treated as C.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> #include &quot;add.h&quot;</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'> <span class="n">import</span> <span class="s">&quot;C&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Everything you exported from c library is available in the C namespace.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>   <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span>
</span><span class='line'>     <span class="nx">C</span><span class="p">.</span><span class="nx">add_two_numbers</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'>   <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Building code is as easy as <code>go build</code></p>

<p>Accessing standard types are easy as <code>C.char</code>, <code>C.int</code>. For complex types, prepend the type name with an underscore at end – e.g <code>C.struct_stat</code>.</p>

<h3>Pointers and memory operations</h3>

<p>Go provides an <code>unsafe</code> module. Go’s GC cannot manage the memory allocated in C code, you should call <code>C.free(unsafe.Pointer)</code> (<code>free</code> is defined in <code>&lt;stdlib.h&gt;</code> ensure that this library is imported) to deallocate.
There are some special functions which convert Go types to C types and vice versa. (lifted from cgo documentation)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="c1">// Go string to C string</span>
</span><span class='line'><span class="c1">// The C string is allocated in the C heap using malloc.</span>
</span><span class='line'><span class="c1">// It is the caller&#39;s responsibility to arrange for it to be</span>
</span><span class='line'><span class="c1">// freed, such as by calling C.free (be sure to include stdlib.h</span>
</span><span class='line'><span class="c1">// if C.free is needed).</span>
</span><span class='line'><span class="kd">func</span> <span class="nx">C</span><span class="p">.</span><span class="nx">CString</span><span class="p">(</span><span class="kt">string</span><span class="p">)</span> <span class="o">*</span><span class="nx">C</span><span class="p">.</span><span class="nx">char</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// C string to Go string</span>
</span><span class='line'><span class="kd">func</span> <span class="nx">C</span><span class="p">.</span><span class="nx">GoString</span><span class="p">(</span><span class="o">*</span><span class="nx">C</span><span class="p">.</span><span class="nx">char</span><span class="p">)</span> <span class="kt">string</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// C string, length to Go string</span>
</span><span class='line'><span class="kd">func</span> <span class="nx">C</span><span class="p">.</span><span class="nx">GoStringN</span><span class="p">(</span><span class="o">*</span><span class="nx">C</span><span class="p">.</span><span class="nx">char</span><span class="p">,</span> <span class="nx">C</span><span class="p">.</span><span class="kt">int</span><span class="p">)</span> <span class="kt">string</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// C pointer, length to Go []byte</span>
</span><span class='line'><span class="kd">func</span> <span class="nx">C</span><span class="p">.</span><span class="nx">GoBytes</span><span class="p">(</span><span class="nx">unsafe</span><span class="p">.</span><span class="nx">Pointer</span><span class="p">,</span> <span class="nx">C</span><span class="p">.</span><span class="kt">int</span><span class="p">)</span> <span class="p">[]</span><span class="kt">byte</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Accessing complex objects</h3>

<p>Accessing structs from Go</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">struct person {</span>
</span><span class='line'><span class="cm">int age;</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="c1">// this can be used in go as</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">p</span> <span class="nx">C</span><span class="p">.</span><span class="nx">struct_person</span>
</span><span class='line'><span class="nx">p</span><span class="p">.</span><span class="nx">age</span> <span class="p">=</span> <span class="mi">23</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can also pass pointers</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">C</span><span class="p">.</span><span class="nx">function_accepts_ptr_to_struct</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">p</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Accessing Unions : No native counterpart, instead of converting it to a type, go treats them as a block of memory represented as byte array. Accessing data is done by casting unsafe.Pointer</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">union quant {</span>
</span><span class='line'><span class="cm">  float weight;</span>
</span><span class='line'><span class="cm">  int count;</span>
</span><span class='line'><span class="cm">};</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">q</span> <span class="nx">C</span><span class="p">.</span><span class="nx">union_quant</span>
</span><span class='line'><span class="nx">ptr</span> <span class="o">:=</span> <span class="p">(</span><span class="o">*</span><span class="kt">float32</span><span class="p">)(</span><span class="nx">unsafe</span><span class="p">.</span><span class="nx">Pointer</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">q</span><span class="p">))</span>
</span><span class='line'><span class="o">*</span><span class="nx">ptr</span> <span class="p">=</span> <span class="mf">3.14</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Extra goodies</h2>

<h3>Compiler Flags</h3>

<p>Compiler flags can be set using the <code>#cgo</code> directive. (<code>CFLAGS</code>, <code>LDFLAGS</code> etc)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">#cgo: LDFLAGS: -lmath</span>
</span><span class='line'><span class="cm">#include &lt;math.h&gt;</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="kn">import</span> <span class="s">&quot;C&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Restricting building</h3>

<p>In many cases using cgo breaks the portability of your app, use build constraints to specify compatibility in source. Build constraints are comments which begin with</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="c1">// +build</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, build comment must appear before package clause and should be followed by a blank line To restrict building just to Linux with cgo,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="c1">// +build linux,cgo !darwin</span>
</span><span class='line'>
</span><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span></code></pre></td></tr></table></div></figure>


<p>These are evaluated as <code>OR</code> of each constraint so the above line becomes <code>(linux AND cgo) OR (NOT darwin)</code>, also multiple build tags can be embedded in file.</p>

<p>There are other methods to restrict builds, see references.</p>

<h2>Reference</h2>

<ul>
<li><a href="https://gist.github.com/dbalan/ace29f0c43638ee4f81d">Link to example code gist</a></li>
<li><a href="https://www.youtube.com/watch?v=oeEVtyypYPg">cgo Talk by Rajesh Ramachandran (Gophercon India)</a></li>
<li><a href="http://dave.cheney.net/2013/10/12/how-to-use-conditional-compilation-with-the-go-build-tool">Conditional compilation with go build</a></li>
<li><a href="http://golang.org/cmd/cgo/">cgo compiler directives</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[State of Terminal: 2015 Edition]]></title>
    <link href="http://dbalan.github.io/blog/2015/03/28/state-of-terminal-2015-edition/"/>
    <updated>2015-03-28T00:28:00+05:30</updated>
    <id>http://dbalan.github.io/blog/2015/03/28/state-of-terminal-2015-edition</id>
    <content type="html"><![CDATA[<p>I do this every year to keep track of the changes in my style. This is the first that goes public though</p>

<ul>
<li>I&rsquo;ve moved to a <strong>Macbook air 2013</strong> edition as my primary laptop (a work perk, thanks <a href="https://twitter.com/plivo.com">@plivo</a>).</li>
<li><strong>Emacs</strong> is the primary editor &ndash; I use <a href="https://github.com/dimitri/el-get">el-get</a> to manage my emacs packages (my <code>init.el</code> is <a href="https://github.com/dbalan/.emacs.d/blob/master/init.el">hosted here</a>), I also use <a href="http://homepage.boetes.org/software/mg/"><code>mg</code></a> heavily while I&rsquo;m inside a terminal.</li>
<li><strong>iTerm2</strong> for terminal. (My <a href="https://gist.github.com/dbalan/378d2f3e4e6a27f0aae8">cheetsheet for for iterm is availabe here</a>)</li>
<li><strong>zsh</strong> for shell, with <a href="https://github.com/zsh-users/antigen">antigen</a> managing plugins and dependencies.</li>
<li><strong>vagrant</strong> for VMs, I tried using <code>docker</code> with boot2docker, but my needs are diffrent. I just need a linux box that runs all the time.</li>
<li><a href="http://spectacleapp.com/"><strong>Spectacle</strong></a> to manage windows. (Yes, I do miss Xmonad and i3)</li>
<li><strong>Firefox</strong> is the primary browser, sometimes <strong>chromium</strong> running for some special sites and tasks.</li>
<li><strong>Todoist</strong> is a great app to track todo lists, and the concept of  gaming the task completion frequency and awarding points is a joy!</li>
<li><strong>Evernote</strong> everything goes inside this.</li>
<li><strong>KeePassX</strong> manages all my passwords.</li>
<li><strong>Tarsnap</strong> for backups, nuff said.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Syslog on Mac OS X: Cheat Sheet]]></title>
    <link href="http://dbalan.github.io/blog/2015/02/21/syslog-on-mac-os-x-cheat-sheet/"/>
    <updated>2015-02-21T00:41:00+05:30</updated>
    <id>http://dbalan.github.io/blog/2015/02/21/syslog-on-mac-os-x-cheat-sheet</id>
    <content type="html"><![CDATA[<p>This is a quick cheatsheet to work with <a href="https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/syslog.1.html"><code>syslog(1)</code></a> implementation OS X uses.</p>

<p><code>Console.app</code> provides a nice UI to access logs in mac, you can do some basic filtering and search, but its limited in terms of raw control a terminal gives you.</p>

<p><code>/usr/bin/syslog</code> can be used to both send and receive logs. Alternatively <a href="https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/logger.1.html"><code>logger(1)</code></a> can be used to send logs to syslog.</p>

<h2>Print logs from a specific facilitiy</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># -w: similar to tailf</span>
</span><span class='line'>syslog -k Facility local1 -w
</span></code></pre></td></tr></table></div></figure>


<h2>Sending logs</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># -l severity level</span>
</span><span class='line'>syslog -s <span class="s2">&quot;message&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Sending logs upstream to another syslog server</h2>

<p>Syslog can forward your logs too. The configuration resides in <code>/etc/syslog.conf</code>. You can append forwarding rules in this file, format is</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Tab separated</span>
</span><span class='line'>Facility.Level    @IPADDR:PORT
</span></code></pre></td></tr></table></div></figure>


<p>After this reload syslog daemon.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo launchctl unload /System/Library/LaunchDaemons/com.apple.syslogd.plist
</span><span class='line'>sudo launchctl load /System/Library/LaunchDaemons/com.apple.syslogd.plistp
</span></code></pre></td></tr></table></div></figure>


<h1>Extra reading</h1>

<ol>
<li><a href="https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man5/asl.conf.5.html"><code>asl.conf(5)</code></a> &ndash; Configuration file for Apple Syslog Log (A syslog superset apple implements), this is where all the logic to route logs are set
facility.level</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Automatic log-in for ACT Broadband]]></title>
    <link href="http://dbalan.github.io/blog/2014/08/16/automatic-log-in-for-act-broadband/"/>
    <updated>2014-08-16T19:14:00+05:30</updated>
    <id>http://dbalan.github.io/blog/2014/08/16/automatic-log-in-for-act-broadband</id>
    <content type="html"><![CDATA[<p>In my openion <a href="http://portal.acttv.in">ACT</a> is the best ISP in <a href="http://en.wikipedia.org/wiki/Bangalore">Bangalore</a>, I found this network to be much better than any other provider in terms of reliability and the bandwidth, they seem very hacker friendly too, logging in as straightforward as a simple HTTP POST.</p>

<p>I have this script running in my router so that I never have to bother logging in.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="nv">USERNAME</span><span class="o">=</span><span class="s2">&quot;&quot;</span>
</span><span class='line'><span class="nv">PASSWORD</span><span class="o">=</span><span class="s2">&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'>curl --data <span class="s1">&#39;act_username=${USERNAME}&amp;act_password=${PASSWORD}&amp;login=login&#39;</span> <span class="se">\</span>
</span><span class='line'>  http://portal.acttv.in -o /dev/null
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debugging RTEMS with GDB]]></title>
    <link href="http://dbalan.github.io/blog/2013/06/23/debugging-rtems-with-gdb/"/>
    <updated>2013-06-23T19:40:00+05:30</updated>
    <id>http://dbalan.github.io/blog/2013/06/23/debugging-rtems-with-gdb</id>
    <content type="html"><![CDATA[<p>RTEMS is difficult to debug, since the default GDB behaviour follows a language based approch and developer will have to debug the application+RTEMS stack as a whole. We are in process of developing a new set of extenstions for GDB to play nice with RTEMS. The intial code is available in this <a href="https://github.com/dbalan/rtems-gdb">github repository</a>.</p>

<p>To use the extenstion,
 &ndash; Clone the repository</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone git@github.com:dbalan/rtems-gdb.git
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Assuming you have a working <a href="http://dbalan.github.io/blog/2013/05/28/getting-started-with-rtems-on-archlinux/">RTEMS toolchain</a>, spin up the GDB and source the code.</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sparc-rtems4.11-gdb
</span><span class='line'>
</span><span class='line'>GNU gdb <span class="o">(</span>GDB<span class="o">)</span> 7.5.1
</span><span class='line'>Copyright <span class="o">(</span>C<span class="o">)</span> 2012 Free Software Foundation, Inc.
</span><span class='line'>License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;
</span><span class='line'>This is free software: you are free to change and redistribute it.
</span><span class='line'>There is NO WARRANTY, to the extent permitted by law.  Type <span class="s2">&quot;show copying&quot;</span>
</span><span class='line'>and <span class="s2">&quot;show warranty&quot;</span> <span class="k">for </span>details.
</span><span class='line'>This GDB was configured as <span class="s2">&quot;--host=x86_64-linux-gnu --target=sparc-rtems4.11&quot;</span>.
</span><span class='line'>For bug reporting instructions, please see:
</span><span class='line'>&lt;http://www.gnu.org/software/gdb/bugs/&gt;.
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span> <span class="nb">source </span>path/to/clone/__init__.py
</span><span class='line'>RTEMS GDB Support loaded
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here is a sneak peak of what will be capable:</p>

<div><script src='https://gist.github.com/5428535.js'></script>
<noscript><pre><code>(gdb) rtems object 436273153
436273153
API:classic Class:semaphores Node:1 Index:1 Id:1A010001
     Name: LBIO
     Attr: 0x00000054,local,pri,bin-sema,inherit-pri,no-pri-ceiling
     Lock: unlocked
  Nesting: 0
  Blocked: 0
   Holder: unlocked
    Queue: len = 8, state = waiting-for-mutex
       '0 '\000'' (c:34065256, r:34065272)  (0207cb5c)
       '0 '\000'' (c:34065256, r:34065272)  (0207cb5c)
       '0 '\000'' (c:34065268, r:34065284)  (0207cb68)
       '0 '\000'' (c:34065268, r:34065284)  (0207cb68)
       '0 '\000'' (c:34065280, r:0)  (0207cb74)
       '0 '\000'' (c:34065280, r:0)  (0207cb74)
       '0 '\000'' (c:1024, r:5)  (0207cb80)
       '0 '\000'' (c:1024, r:5)  (0207cb80)
</code></pre></noscript></div>




<div><script src='https://gist.github.com/5488653.js'></script>
<noscript><pre><code>(gdb) source __init__.py
RTEMS GDB Support loaded
(gdb) rtems semaphores 
     Name: LBIO
     Attr: 0x00000054,local,pri,bin-sema,inherit-pri,no-pri-ceiling
     Lock: unlocked
  Nesting: 0
  Blocked: 0
   Holder: unlocked
    Queue: len = 8, state = waiting-for-mutex
       '0 '\000'' (c:34065256, r:34065272)  (0207cb5c)
       '0 '\000'' (c:34065256, r:34065272)  (0207cb5c)
       '0 '\000'' (c:34065268, r:34065284)  (0207cb68)
       '0 '\000'' (c:34065268, r:34065284)  (0207cb68)
       '0 '\000'' (c:34065280, r:0)  (0207cb74)
       '0 '\000'' (c:34065280, r:0)  (0207cb74)
       '0 '\000'' (c:1024, r:5)  (0207cb80)
       '0 '\000'' (c:1024, r:5)  (0207cb80)
     Name: TRmi
     Attr: 0x00000054,local,pri,bin-sema,inherit-pri,no-pri-ceiling
     Lock: unlocked
  Nesting: 0
  Blocked: 0
   Holder: unlocked
    Queue: len = 8, state = waiting-for-mutex
       '0 '\000'' (c:34065376, r:34065392)  (0207cbd4)
       '0 '\000'' (c:34065376, r:34065392)  (0207cbd4)
       '0 '\000'' (c:34065388, r:34065404)  (0207cbe0)
       '0 '\000'' (c:34065388, r:34065404)  (0207cbe0)
       '0 '\000'' (c:34065400, r:0)  (0207cbec)
       '0 '\000'' (c:34065400, r:0)  (0207cbec)
       '0 '\000'' (c:1024, r:5)  (0207cbf8)
       '0 '\000'' (c:1024, r:5)  (0207cbf8)
     Name: TRia
     Attr: 0x00000054,local,pri,bin-sema,inherit-pri,no-pri-ceiling
     Lock: unlocked
  Nesting: 0
  Blocked: 0
   Holder: unlocked
    Queue: len = 8, state = waiting-for-mutex
       '0 '\000'' (c:34065496, r:34065512)  (0207cc4c)
       '0 '\000'' (c:34065496, r:34065512)  (0207cc4c)
       '0 '\000'' (c:34065508, r:34065524)  (0207cc58)
       '0 '\000'' (c:34065508, r:34065524)  (0207cc58)
       '0 '\000'' (c:34065520, r:0)  (0207cc64)
       '0 '\000'' (c:34065520, r:0)  (0207cc64)
       '0 '\000'' (c:1024, r:5)  (0207cc70)
       '0 '\000'' (c:1024, r:5)  (0207cc70)
     Name: TRoa
     Attr: 0x00000054,local,pri,bin-sema,inherit-pri,no-pri-ceiling
     Lock: unlocked
  Nesting: 0
  Blocked: 0
---Type &lt;return&gt; to continue, or q &lt;return&gt; to quit---
   Holder: unlocked
    Queue: len = 8, state = waiting-for-mutex
       '0 '\000'' (c:34065616, r:34065632)  (0207ccc4)
       '0 '\000'' (c:34065616, r:34065632)  (0207ccc4)
       '0 '\000'' (c:34065628, r:34065644)  (0207ccd0)
       '0 '\000'' (c:34065628, r:34065644)  (0207ccd0)
       '0 '\000'' (c:34065640, r:0)  (0207ccdc)
       '0 '\000'' (c:34065640, r:0)  (0207ccdc)
       '0 '\000'' (c:1024, r:5)  (0207cce8)
       '0 '\000'' (c:1024, r:5)  (0207cce8)
     Name: TRxa
     Attr: 0x00000020,local,fifo,simple-bin-sema,no-inherit-pri,no-pri-ceiling
     Lock: locked
  Nesting: 1
  Blocked: 0
   Holder: 'IDLE' (c:255, r:255)
    Queue: len = 2, state = waiting-for-mutex
       '0 '\000'' (c:0, r:0)  (0207cd3c)
       '0 '\000'' (c:0, r:0)  (0207cd3c)
(gdb) 
</code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting started with RTEMS on Archlinux]]></title>
    <link href="http://dbalan.github.io/blog/2013/05/28/getting-started-with-rtems-on-archlinux/"/>
    <updated>2013-05-28T21:24:00+05:30</updated>
    <id>http://dbalan.github.io/blog/2013/05/28/getting-started-with-rtems-on-archlinux</id>
    <content type="html"><![CDATA[<p>The default RTEMS geting started does not cover the toolchain setup as it should be. It either redirects the user to download a ~1 GB distro or some pretty old RPMs. This shouldn&rsquo;t be like this.</p>

<p>There is an excellent tool called <strong><em>rtems source builder</em></strong> which can help a newbie setup RTEMS environment in a brisk. This post is the authors journal about how he did it, shared beacuse it might be beneficial to people looking to bootstrap RTEMS.</p>

<p>RTEMS is a real time operating system. It works on various type of hardware, and a devlopment setup is specific to the hardware of developers choice. Here I will demonstrate setting up a sparc toolchain with b-sis simulator.</p>

<h3>Setting up toolchain</h3>

<p>First step of our RTEMS journey. A toolchain consists of a compiler, linker, debuggger and a simulator for the hardware. We need these tools to compile the RTEMS code and execute our programs.</p>

<p>This was a painful step in past. Cross compiler environments are nasty to get right. But dont worry, we have our wonderful rtems-source-builder to rescue.</p>

<p>rtems-source-builder automates the task of setting up this toolchain &ndash; it downloads the source files, builds them and installs in the system. It also have the option to make a tarball.</p>

<p>The actuall steps are documented here &ndash; <a href="http://www.rtems.org/ftp/pub/rtems/people/chrisj/source-builder/source-builder.html" title="rtems-source-builder documentation">rtems-source-builder documentation</a>, but if you prefer a capsule</p>

<ul>
<li>Setup directories and get source</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd
</span><span class='line'>$ mkdir -p development/rtems/src
</span><span class='line'>$ cd development/rtems/src
</span><span class='line'>$ git clone git://git.rtems.org/rtems-source-builder.git
</span><span class='line'>$ cd rtems-source-builder</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Check environment.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ./source-builder/sb-check
</span><span class='line'>RTEMS Source Builder environment is ok</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Build a sparc target</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd rtems
</span><span class='line'>$ ../source-builder/sb-set-builder --log=l-sparc.txt /
</span><span class='line'>--prefix=$HOME/development/rtems/4.11 4.11/rtems-sparc</span></code></pre></td></tr></table></div></figure>


<p>this will produce binaries in <code>$HOME/development/rtems/4.11</code> directory.</p>

<p><strong>Note</strong>: Default version of makeinfo in archlinux is incomaptible with tools we build, source-builder documentations says</p>

<blockquote><p>Archlinux, by default installs texinfo-5 which is incompatible for building GCC 4.7 tree. You will have to obtain texinfo-legacy from AUR and provide a manual override.</p></blockquote>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># pacman -R texinfo
</span><span class='line'>$ yaourt -S texinfo-legacy
</span><span class='line'># ln -s /usr/bin/makeinfo-4.13a /usr/bin/makeinfo</span></code></pre></td></tr></table></div></figure>


<h3>Building RTEMS</h3>

<ul>
<li>First obtain the RTEMS code from github.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd
</span><span class='line'>$ mkdir -p development/rtems/repo
</span><span class='line'>$ cd development/rtems/repo
</span><span class='line'>$ git clone git@github.com:RTEMS/rtems.git
</span><span class='line'>$ cd rtems</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Bootstrap the rtems and build code.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ export PATH=/home/dhananjay/build/rtems/4.11/bin:$PATH
</span><span class='line'>$ ./bootstrap</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Build a b-sis simulator code.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd ..
</span><span class='line'>$ mkdir b-sis && cd b-sis
</span><span class='line'>$ ../rtems/configure --target=sparc-rtems4.11 --enable-rtemsbsp=sis --enable-tests=samples --enable-posix --prefix=/home/dhananjay/build/rtems/src/
</span><span class='line'>$ make</span></code></pre></td></tr></table></div></figure>


<h3>Running example code.</h3>

<ul>
<li>Find the sample applications and execute them.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd sparc-rtems4.11/c/sis/testsuites/samples/hello
</span><span class='line'>$ ls
</span><span class='line'>
</span><span class='line'>hello.exe  hello.num  hello.ralf  init.o  Makefile
</span><span class='line'>$ sparc-rtems4.11-run hello.exe
</span><span class='line'>
</span><span class='line'>*** GSOC HELLO WORLD TEST ***
</span><span class='line'>Hello RTEMS World
</span><span class='line'>Dhananjay Balan
</span><span class='line'>*** END OF HELLO WORLD TEST ***</span></code></pre></td></tr></table></div></figure>


<p><em>Update</em>: Newer versions of RSB builds RTEMS automatically, no manual intervention needed. You can skip this step altogether.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Summer of Code 2013]]></title>
    <link href="http://dbalan.github.io/blog/2013/05/28/summer-of-code-2013/"/>
    <updated>2013-05-28T12:35:00+05:30</updated>
    <id>http://dbalan.github.io/blog/2013/05/28/summer-of-code-2013</id>
    <content type="html"><![CDATA[<p><img src="http://dbalan.github.io/images/gsoc_2013.jpg"></p>

<p>Google published summer of code results yesterday. I am happy that I was selected. My project is titled <strong>Better GDB support for RTEMS</strong>, it is mentored by <em>Ms. Jennifer Averett</em> from RTEMS. You can find <a href="http://www.google-melange.com/gsoc/proposal/review/google/gsoc2013/dhananjay/35002">my proposal here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New Home]]></title>
    <link href="http://dbalan.github.io/blog/2013/05/03/new-home/"/>
    <updated>2013-05-03T21:01:00+05:30</updated>
    <id>http://dbalan.github.io/blog/2013/05/03/new-home</id>
    <content type="html"><![CDATA[<p>I loved posterous. I don&rsquo;t know how I missed it but till the final day I had no clue they were shutting down. It was an hour of panic. I had every itch not to go back to wordpress. It was bloated and just not my thing, and Jekyll was way to much work!</p>

<p>Then I found Octopress &ndash; just the right thing, simply perfect. And it was love at first sight. :)</p>

<p>Welcome to my new home, <a href="http://dbalan.github.io">Backtrace</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Thank You Note.]]></title>
    <link href="http://dbalan.github.io/blog/2013/01/01/a-thank-you-note/"/>
    <updated>2013-01-01T05:58:00+05:30</updated>
    <id>http://dbalan.github.io/blog/2013/01/01/a-thank-you-note</id>
    <content type="html"><![CDATA[<p><a href="http://dbalan.files.wordpress.com/2013/01/869b2-4918647118_e1c7e4644f_d.jpg"><img src="http://dbalan.files.wordpress.com/2013/01/869b2-4918647118_e1c7e4644f_d.jpg" alt="4918647118_e1c7e4644f_d" /></a></p>

<p>Love makes you see the world a lot different than you used to. Life suddenly gets filled with warm glowing colors. Opens up the each and every long sealed corridors of you heart and makes them beat in rhythm, orchestrating a symphony of life. The amount of happiness your life gets filled with might be the real definition of infinity</p>

<p>Being in love is a privilege, Gifted by a heart indeed is the greatest ever. Even parting hearts cant take away your happiness. We loose and keep some fragments and memories weaved in golden threads. For me, they will be sufficient to push the emptiness of existence out for a life time. More than enough to remain in love</p>

<p><em><a href="http://www.flickr.com/photos/juniperberry/4918647118/sizes/m/in/photostream/">Photo</a> reused under a cc license</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Name your servers.]]></title>
    <link href="http://dbalan.github.io/blog/2012/12/12/name-your-servers/"/>
    <updated>2012-12-12T16:21:00+05:30</updated>
    <id>http://dbalan.github.io/blog/2012/12/12/name-your-servers</id>
    <content type="html"><![CDATA[<p>If your day involves ssh-ing into various servers, you know how
cumbersome is to type all that details again and again. When the number
becomes large, you tend to confuse between host names, IPs and
usernames.</p>

<p>But, ssh allows you to alias them into cute nicknames you prefer.</p>

<p>The configuration file needed to be edited is  <code>~/.ssh/config.</code></p>

<p>The sample configuration that should be append to this file for adding
alias <em>server</em> to <code>user@example.org</code> is :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Host server
</span><span class='line'>Hostname example.org
</span><span class='line'>User user</span></code></pre></td></tr></table></div></figure>


<p>Now all you have to do is</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ssh server</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rooting a nexus 7]]></title>
    <link href="http://dbalan.github.io/blog/2012/12/06/rooting-a-nexus-7/"/>
    <updated>2012-12-06T23:56:00+05:30</updated>
    <id>http://dbalan.github.io/blog/2012/12/06/rooting-a-nexus-7</id>
    <content type="html"><![CDATA[<p>Lot of posts in the web about this is just bogus, all of them want you
to download a fat rootkit and click on the root.exe :&ndash;/</p>

<p>Being a developer device, rooting nexus 7 is easy.</p>

<ol>
<li>Gain developer privilege (figure out yourself :-P)</li>
<li>Reboot to bootloader</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ adb reboot bootloader</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Unlock the bootloader</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ fastboot oem unlock # Might have to be the superuser.</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Download the recovery image for device from <a href="http://clockworkmod.com/rommanager">here</a>
and flash it</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ fastboot flash recovery</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Get the <a href="http://forum.xda-developers.com/showthread.php?t=1538053">superuser binary</a>.</li>
<li>Reboot the device and put it in the sdcard (or any storage you have,)</li>
<li>Reboot to the recovery and flash it.</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> $ adb reboot recovery</span></code></pre></td></tr></table></div></figure>


<p>Note: People suggested using this to <a href="https://play.google.com/store/apps/details?id=org.projectvoodoo.otarootkeeper&amp;feature=search_result#?t=W251bGwsMSwxLDEsIm9yZy5wcm9qZWN0dm9vZG9vLm90YXJvb3RrZWVwZXIiXQ..">keep root priviliges</a> after OTA &ndash;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My perfect terminal]]></title>
    <link href="http://dbalan.github.io/blog/2012/11/24/my-perfect-terminal/"/>
    <updated>2012-11-24T11:14:19+05:30</updated>
    <id>http://dbalan.github.io/blog/2012/11/24/my-perfect-terminal</id>
    <content type="html"><![CDATA[<ol>
<li> Install <a href="http://www.zsh.org/">ZSH</a></li>
<li> Install <a href="https://github.com/robbyrussell/oh-my-zsh">Oh-my-zsh</a></li>
<li> Install <a href="http://ethanschoonover.com/solarized">solarized</a> color theme <a href="https://github.com/sigurdga/gnome-terminal-colors-solarized"><del>for gnome-terminal</del></a>. Shifted to <a href="http://software.jessies.org/terminator/">Terminator</a> with a <a href="https://github.com/chriskempson/base16">base16</a> theme.</li>
<li> Install a <a href="https://gist.github.com/1595572">powerline patched font</a>.</li>
<li> Set the zsh theme to <a href="https://gist.github.com/3712874">agnoster</a>.</li>
</ol>


<p>Happy Hacking. :&ndash;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NetBSD Chronicles.]]></title>
    <link href="http://dbalan.github.io/blog/2012/11/22/netbsd-chronicles/"/>
    <updated>2012-11-22T03:15:00+05:30</updated>
    <id>http://dbalan.github.io/blog/2012/11/22/netbsd-chronicles</id>
    <content type="html"><![CDATA[<p>To be frank I wasn&rsquo;t doing much for almost an year, got lazy as one can ever be. Today was the day to break it. Got a little push do something and I got down to do it. I was looking at BSD development for a long time, and thought this is the best time to get involved. I am a total noob at BSD, I never really used one. So it was challenging when I started to install NetBSD into an old Comapq nx6120 that was lying around. I know anyone could get to the root shell easily, with help from brilliant click and go installers, configuring and customizing was the real problem.</p>

<p>Its 0300 now, and I got my laptop running NetBSD 6.0, and connected to wireless (easier than I thought &ndash; thanks to legacy hardware.)</p>

<p><strong>Configuring Intel PRO/Wireless </strong></p>

<p><strong> </strong>Unlike linux, BSD can include all the microcode (firmware) in the distribution itself, due the flexibility of licensing system. Reading up <em>iwi(4)</em> reveals youve to accept the EULA by setting the sysctl variable hw.iwi.accept_eula to 1</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># sysctl -w hw.iwi.accept_eula=1</span></code></pre></td></tr></table></div></figure>


<p>The university wireless is open, so I didnt had to mess too much.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># ifconfig ssid "SSID" iwi0 dhclient iwi0</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thamarassery Mountain Pass, Wayanad.]]></title>
    <link href="http://dbalan.github.io/blog/2012/03/30/thamarassery-mountain-pass-wayanad/"/>
    <updated>2012-03-30T00:04:38+05:30</updated>
    <id>http://dbalan.github.io/blog/2012/03/30/thamarassery-mountain-pass-wayanad</id>
    <content type="html"><![CDATA[<p><a href="http://dbalan.files.wordpress.com/2012/03/7777a-thamarasery.jpg"><img src="http://dbalan.files.wordpress.com/2012/03/7777a-thamarasery.jpg" alt="Thamarasery" /></a></p>

<p>A snap from the recent trip. ;)</p>
]]></content>
  </entry>
  
</feed>
