<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: golang | Binary Strolls]]></title>
  <link href="http://dbalan.github.io/blog/categories/golang/atom.xml" rel="self"/>
  <link href="http://dbalan.github.io/"/>
  <updated>2016-04-01T11:56:26+05:30</updated>
  <id>http://dbalan.github.io/</id>
  <author>
    <name><![CDATA[Dhananjay Balan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Notes on cgo]]></title>
    <link href="http://dbalan.github.io/blog/2015/03/29/notes-on-cgo/"/>
    <updated>2015-03-29T00:28:00+05:30</updated>
    <id>http://dbalan.github.io/blog/2015/03/29/notes-on-cgo</id>
    <content type="html"><![CDATA[<h2>Referencing c from go.</h2>

<h3>Basic operation</h3>

<p>import &ldquo;C&rdquo; imports the C namespace into go, the comment just above this statement is treated as C.</p>

<p><code>c
/*
 #include "add.h"
 */
 import "C"
</code>
Everything you exported from c library is available in the C namespace.</p>

<p>```go
func main() {
   fmt.Println(</p>

<pre><code> C.add_two_numbers(3,4)
</code></pre>

<p>   )
}
```</p>

<p>Building code is as easy as <code>go build</code></p>

<p>Accessing standard types are easy as <code>C.char</code>, <code>C.int</code>. For complex types, prepend the type name with an underscore at end – e.g <code>C.struct_stat</code>.</p>

<h3>Pointers and memory operations</h3>

<p>Go provides an <code>unsafe</code> module. Go’s GC cannot manage the memory allocated in C code, you should call <code>C.free(unsafe.Pointer)</code> (<code>free</code> is defined in <code>&lt;stdlib.h&gt;</code> ensure that this library is imported) to deallocate.
There are some special functions which convert Go types to C types and vice versa. (lifted from cgo documentation)
```go
// Go string to C string
// The C string is allocated in the C heap using malloc.
// It is the caller&rsquo;s responsibility to arrange for it to be
// freed, such as by calling C.free (be sure to include stdlib.h
// if C.free is needed).
func C.CString(string) *C.char</p>

<p>// C string to Go string
func C.GoString(*C.char) string</p>

<p>// C string, length to Go string
func C.GoStringN(*C.char, C.int) string</p>

<p>// C pointer, length to Go []byte
func C.GoBytes(unsafe.Pointer, C.int) []byte
```</p>

<h3>Accessing complex objects</h3>

<p>Accessing structs from Go
<code>go
/*
struct person {
int age;
*/
// this can be used in go as
var p C.struct_person
p.age = 23
</code></p>

<p>You can also pass pointers</p>

<p><code>go
C.function_accepts_ptr_to_struct(&amp;p)
</code></p>

<p>Accessing Unions : No native counterpart, instead of converting it to a type, go treats them as a block of memory represented as byte array. Accessing data is done by casting unsafe.Pointer</p>

<p>```go
/<em>
union quant {
  float weight;
  int count;
};
</em>/</p>

<p>var q C.union_quant
ptr := (<em>float32)(unsafe.Pointer(&amp;q))
</em>ptr = 3.14
```</p>

<h2>Extra goodies</h2>

<h3>Compiler Flags</h3>

<p>Compiler flags can be set using the <code>#cgo</code> directive. (<code>CFLAGS</code>, <code>LDFLAGS</code> etc)</p>

<p>```go
/*</p>

<h1>cgo: LDFLAGS: -lmath</h1>

<h1>include &lt;math.h></h1>

<p>*/
import &ldquo;C&rdquo;
```</p>

<h3>Restricting building</h3>

<p>In many cases using cgo breaks the portability of your app, use build constraints to specify compatibility in source. Build constraints are comments which begin with</p>

<p><code>go
// +build
</code>
Now, build comment must appear before package clause and should be followed by a blank line To restrict building just to Linux with cgo,</p>

<p>```go
// +build linux,cgo !darwin</p>

<p>package main
```</p>

<p>These are evaluated as <code>OR</code> of each constraint so the above line becomes <code>(linux AND cgo) OR (NOT darwin)</code>, also multiple build tags can be embedded in file.</p>

<p>There are other methods to restrict builds, see references.</p>

<h2>Reference</h2>

<ul>
<li><a href="https://gist.github.com/dbalan/ace29f0c43638ee4f81d">Link to example code gist</a></li>
<li><a href="https://www.youtube.com/watch?v=oeEVtyypYPg">cgo Talk by Rajesh Ramachandran (Gophercon India)</a></li>
<li><a href="http://dave.cheney.net/2013/10/12/how-to-use-conditional-compilation-with-the-go-build-tool">Conditional compilation with go build</a></li>
<li><a href="http://golang.org/cmd/cgo/">cgo compiler directives</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
