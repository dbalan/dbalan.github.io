<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: haskell | Binary Strolls]]></title>
  <link href="http://dbalan.github.io/blog/categories/haskell/atom.xml" rel="self"/>
  <link href="http://dbalan.github.io/"/>
  <updated>2016-04-01T11:56:26+05:30</updated>
  <id>http://dbalan.github.io/</id>
  <author>
    <name><![CDATA[Dhananjay Balan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Recursion]]></title>
    <link href="http://dbalan.github.io/blog/2015/08/22/recursion/"/>
    <updated>2015-08-22T00:28:00+05:30</updated>
    <id>http://dbalan.github.io/blog/2015/08/22/recursion</id>
    <content type="html"><![CDATA[<p><code>haskell
fibonacci :: [Integer]
fibonacci = 1:1:(zipWith (+) fibonacci (tail fibonacci))
</code></p>

<p>Above is a simple function that generates an infinite stream of fibonacci numbers. Its written in haskell.</p>

<p>This is a piece of code that made me think a lot lately, it make clever use of recursion to define the stream and computes with a linear number of additions. I think its pretty damn sexy!</p>

<h2>Notes:</h2>

<ul>
<li>Many thanks to a co-worker who helped me figure this out.</li>
<li>I hear that there are more efficient ways to compute fibonacci numbers (namley O(logn)). &ndash; should investigate this</li>
</ul>

]]></content>
  </entry>
  
</feed>
