<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Archlinux | Binary Strolls]]></title>
  <link href="http://dbalan.github.io/blog/categories/archlinux/atom.xml" rel="self"/>
  <link href="http://dbalan.github.io/"/>
  <updated>2016-04-01T11:56:26+05:30</updated>
  <id>http://dbalan.github.io/</id>
  <author>
    <name><![CDATA[Dhananjay Balan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Getting started with RTEMS on Archlinux]]></title>
    <link href="http://dbalan.github.io/blog/2013/05/28/getting-started-with-rtems-on-archlinux/"/>
    <updated>2013-05-28T21:24:00+05:30</updated>
    <id>http://dbalan.github.io/blog/2013/05/28/getting-started-with-rtems-on-archlinux</id>
    <content type="html"><![CDATA[<p>The default RTEMS geting started does not cover the toolchain setup as it should be. It either redirects the user to download a ~1 GB distro or some pretty old RPMs. This shouldn&rsquo;t be like this.</p>

<p>There is an excellent tool called <strong><em>rtems source builder</em></strong> which can help a newbie setup RTEMS environment in a brisk. This post is the authors journal about how he did it, shared beacuse it might be beneficial to people looking to bootstrap RTEMS.</p>

<p>RTEMS is a real time operating system. It works on various type of hardware, and a devlopment setup is specific to the hardware of developers choice. Here I will demonstrate setting up a sparc toolchain with b-sis simulator.</p>

<h3>Setting up toolchain</h3>

<p>First step of our RTEMS journey. A toolchain consists of a compiler, linker, debuggger and a simulator for the hardware. We need these tools to compile the RTEMS code and execute our programs.</p>

<p>This was a painful step in past. Cross compiler environments are nasty to get right. But dont worry, we have our wonderful rtems-source-builder to rescue.</p>

<p>rtems-source-builder automates the task of setting up this toolchain &ndash; it downloads the source files, builds them and installs in the system. It also have the option to make a tarball.</p>

<p>The actuall steps are documented here &ndash; <a href="http://www.rtems.org/ftp/pub/rtems/people/chrisj/source-builder/source-builder.html" title="rtems-source-builder documentation">rtems-source-builder documentation</a>, but if you prefer a capsule</p>

<ul>
<li>Setup directories and get source
<code>
$ cd
$ mkdir -p development/rtems/src
$ cd development/rtems/src
$ git clone git://git.rtems.org/rtems-source-builder.git
$ cd rtems-source-builder
</code></li>
<li><p>Check environment.
<code>
$ ./source-builder/sb-check
RTEMS Source Builder environment is ok
</code></p></li>
<li><p>Build a sparc target
<code>
$ cd rtems
$ ../source-builder/sb-set-builder --log=l-sparc.txt /
--prefix=$HOME/development/rtems/4.11 4.11/rtems-sparc
</code>
this will produce binaries in <code>$HOME/development/rtems/4.11</code> directory.</p></li>
</ul>


<p><strong>Note</strong>: Default version of makeinfo in archlinux is incomaptible with tools we build, source-builder documentations says</p>

<blockquote><p>Archlinux, by default installs texinfo-5 which is incompatible for building GCC 4.7 tree. You will have to obtain texinfo-legacy from AUR and provide a manual override.</p></blockquote>

<p>```</p>

<h1>pacman -R texinfo</h1>

<p>$ yaourt -S texinfo-legacy</p>

<h1>ln -s /usr/bin/makeinfo-4.13a /usr/bin/makeinfo</h1>

<p>```</p>

<h3>Building RTEMS</h3>

<ul>
<li><p>First obtain the RTEMS code from github.
<code>
$ cd
$ mkdir -p development/rtems/repo
$ cd development/rtems/repo
$ git clone git@github.com:RTEMS/rtems.git
$ cd rtems
</code></p></li>
<li><p>Bootstrap the rtems and build code.
<code>
$ export PATH=/home/dhananjay/build/rtems/4.11/bin:$PATH
$ ./bootstrap
</code></p></li>
<li><p>Build a b-sis simulator code.
<code>
$ cd ..
$ mkdir b-sis &amp;&amp; cd b-sis
$ ../rtems/configure --target=sparc-rtems4.11 --enable-rtemsbsp=sis --enable-tests=samples --enable-posix --prefix=/home/dhananjay/build/rtems/src/
$ make
</code></p></li>
</ul>


<h3>Running example code.</h3>

<ul>
<li>Find the sample applications and execute them.</li>
</ul>


<p>```
$ cd sparc-rtems4.11/c/sis/testsuites/samples/hello
$ ls</p>

<p>hello.exe  hello.num  hello.ralf  init.o  Makefile
$ sparc-rtems4.11-run hello.exe</p>

<p><strong><em> GSOC HELLO WORLD TEST </em></strong>
Hello RTEMS World
Dhananjay Balan
<strong><em> END OF HELLO WORLD TEST </em></strong>
```
<em>Update</em>: Newer versions of RSB builds RTEMS automatically, no manual intervention needed. You can skip this step altogether.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My perfect terminal]]></title>
    <link href="http://dbalan.github.io/blog/2012/11/24/my-perfect-terminal/"/>
    <updated>2012-11-24T11:14:19+05:30</updated>
    <id>http://dbalan.github.io/blog/2012/11/24/my-perfect-terminal</id>
    <content type="html"><![CDATA[<ol>
<li> Install <a href="http://www.zsh.org/">ZSH</a></li>
<li> Install <a href="https://github.com/robbyrussell/oh-my-zsh">Oh-my-zsh</a></li>
<li> Install <a href="http://ethanschoonover.com/solarized">solarized</a> color theme <a href="https://github.com/sigurdga/gnome-terminal-colors-solarized"><del>for gnome-terminal</del></a>. Shifted to <a href="http://software.jessies.org/terminator/">Terminator</a> with a <a href="https://github.com/chriskempson/base16">base16</a> theme.</li>
<li> Install a <a href="https://gist.github.com/1595572">powerline patched font</a>.</li>
<li> Set the zsh theme to <a href="https://gist.github.com/3712874">agnoster</a>.</li>
</ol>


<p>Happy Hacking. :&ndash;)</p>
]]></content>
  </entry>
  
</feed>
